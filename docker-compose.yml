################################################################################
## Akeeba Panopticon
## (c) 2023-2024 Nicholas K. Dionysopoulos / Akeeba Ltd
## Licensed under the GNU Affero General Public License, version 3 or later
## <https://www.gnu.org/licenses/agpl-3.0.txt>
##
## -----------------------------------------------------------------------------
##
## Sample Docker Compose file, using Apache
##
## Use this Docker Compose file to set up your own installation of Akeeba
## Panopticon. Read the comments in this file to understand what to configure.
##
################################################################################

version: "3.5"

services:
  # The web application container, based on Apache with PHP-FPM
  php:
    build:
      context: '.'
      dockerfile: Dockerfile
      args:
        PHP_VERSION: 8.2
    # If you want to use the pre-made images, uncomment this line and remove the `build` section.
    #image: ghcr.io/akeeba/panopticon:latest
    depends_on:
      wait-for-db:
        condition: service_completed_successfully
    links:
      - mysql
    # This exposes the internal web server ports (80 and 443) to your host as ports 4280 and 4443 respectively.
    # You may want to change that to 80:80 and 443:443 for live deployments.
    ports:
      - 4280:80
      - 4443:443
    volumes:
      - panopticon_usercode:/var/www/html/user_code
      - panopticon_config:/var/www/html/config
    container_name: panopticon_php
    restart: always
    env_file:
      - .env.docker
  # The database server container.
  mysql:
    image: mysql:8.0
    command:
      - --default-authentication-plugin=mysql_native_password
    restart: always
    volumes:
      - panopticon_mysql:/var/lib/mysql
    env_file:
      - .env.docker
    container_name: panopticon_mysql
  # Used to start the web application container only after the database container is up and running.
  wait-for-db:
    image: atkrad/wait4x
    depends_on:
      - mysql
    command: tcp mysql:3306 -t 30s -i 250ms

# These are the Docker volumes storing persistent data.
volumes:
  # User-provided code. It's mounted in the user_code folder of the application.
  panopticon_usercode:
  # Panopticon's configuration files
  panopticon_config:
  # The MySQL data directory
  panopticon_mysql: